name: "Terraform Plan"

on:
  pull_request:

env:
  TF_CLOUD_ORGANIZATION: "SteveAngeli"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "my-website"
  CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    if: github.repository != 'sjangeli/My Website'
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      # so GitHub can check out this repo using the default github.token
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
            terraform_version: "1.6.7"

      - name: Get Terraform Outputs
        if: always()
        id: get_outputs
        run: |
            terraform init
            terraform output -json > terraform_outputs.json
            echo "TERRAFORM_OUTPUTS=$(cat terraform_outputs.json)" >> "$GITHUB_OUTPUT"

      - name: Extract API Gateway URL
        if: steps.get_outputs.outputs.TERRAFORM_OUTPUTS
        id: extract_api_gateway_url
        run: |
            API_GATEWAY_URL=$(echo "${{ fromJson(steps.get_outputs.outputs.TERRAFORM_OUTPUTS).api_gateway_url }}" | sed 's/\\"/"/g')
            echo "API_GATEWAY_URL=$API_GATEWAY_URL" >> "$GITHUB_OUTPUT"

      - name: Set API Gateway URL output
        id: set_output
        if: steps.extract_api_gateway_url.outputs.API_GATEWAY_URL
        run: |
            echo "API_GATEWAY_URL=${{ steps.extract_api_gateway_url.outputs.API_GATEWAY_URL }}" >> $GITHUB_OUTPUT
    
      - name: Use API Gateway URL
        if: steps.set_output.outputs.API_GATEWAY_URL
        env:
            API_GATEWAY_URL: ${{ steps.set_output.outputs.API_GATEWAY_URL }}
        run: |
            echo "The API Gateway URL is: $API_GATEWAY_URL"

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });